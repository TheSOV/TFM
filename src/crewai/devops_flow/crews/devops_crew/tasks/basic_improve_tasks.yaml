analyse_manifest_issue:
  description: >
    **Feedback** is mandatory over all other information.
    **Goal - Determine root cause of the problem, isolate the issue and propose a solution**  

    <Steps>
    1. Use the yaml_read tool to read the file.
    2. With the information of the <issues>, analyze the code loaded from the yaml_read tool.
    3. Try to isolate each issue in the content of the code, identifying the index of the document,
    and the section of the code where the issue is located. Focus on solving each issue solely, 
    and avoid to modify other elements that are not related to the issue. Take in count, that it 
    is possible that multiple issues arte related and has the same root, you can group them in the
    same solution.
    4. Investigate for each root cause, the posible solution. Always try to solve the problem with 
    minimal changes. Avoid to propose any change not related to the issue. Focus on a simple solution
    that addresses the root cause. Only give the changes that are required to me made, no more lines
    that the ones that are required to be made. Use the information in hand, do not modify what its working,
    or its not mentioned in the issue.
    5. Generate the output.
    </Steps>
    
    
    <Important>
    - Focus on solving gracefully and with production level code typical problems, such as permission
    problems, write permissions, network capabilities, non-root best-practices, volumes, volumes
    claims, ephemeral storage, etc. Focus on giving simple, functional solutions, focused on solving
    the problem.

    - Also, avoid to repreat solutions already present in the records. When trying to get a solution
    use a clear and concise approach, avoiding to repeat the same errors.

    - Issues can come with recommendations, however, they might be superficial, as they are 
    generated while testing the manifest. You can use them as reference, but you must propose
    your own fact based solution.

    - In the blackboard, there is a list of manifests, with descriptions and a code example, however
    at this point, those are referential, just to keep track of the bases from where the project
    was created. You can add new manifests or resources as required, in order to make the project
    functional.

    - Sometimes, multiple subdirectories inside a same directory requires to be written,
    make writable the parent directory or each subdirectory. For example:
    if there is folder 1/folder 1.1/folder 1.1.1, and folder 1/folder 1.2/folder 1.2.1, and folder 1/folder 1.3/folder 1.3.1, 
    make writable folder 1 directory.  
    
    -  **This is extremly important, is the politic to follow**: Try to make minimal changes, avoidding to modify elements that are unrelated to the issue,
    and modifying only the documents required to fix the issue. Focus on the issues, solving them
    with the minimal changes possible. 
    </Important>
    
    **Context Blocks**

    • `<issues>` - Last validation error output.  
    • `<blackboard>` - Project-wide artefacts and notes.  
    • `<feedback>` - If present, addressing it is top priority.

    
    <issues>
    {issues}
    </issues>

    <blackboard>
    {blackboard}
    </blackboard>

    <feedback>
    {feedback}
    </feedback>
  expected_output: >
    A json containing:
      - issues: List of issues to which the solution applies
      - resource: Resource where the issue was found and the solution will be applied
      - section: Specific section of the code, where the issue was found and the solution will be applied
      - changes: Modifications to be applied to the resource, to solve the issue
  max_retries: 3
  agent: devops_researcher

apply_manifest_fix:
  description: >
    **Feedback** is mandatory over all other information.
    **Goal - edit, lint, repeat until clean**  
    Apply the agreed fixes, given in the context received, run 
    validation (security scan disabled), and exit only after the 
    manifest passes with zero functional errors.

    **Execution workflow**

    1. **Read file** - use `yaml_read` to read the file.
    2. **Edit file** - use `yaml_edit` (or `create_file` if missing) to apply
       each change described in *analyse_manifest_issue*.  Ensure you dont add 
       duplicated elements. If duplicated elements are found, remove them.
    3. **Validate** -  
       Use `config_validator` to validate the file. If the validation fails, 
       use `yaml_read` to read the file and `yaml_edit` to edit the file. Repeat
       the process until the validation passes.
    4. **Success** - final action **must** be a passing
       validate_manifest call.

    **Important**  
    The YAML edit **is mandatory**. The final action must be a successful.
    validate_manifest call.

    <Important>
    Pay special attention to all the fields of the validation output, and try to fix them all, with
    the exception of security_scan errors, that are at your consideration to be fixed or not, 
    depending on the severity or the level of contradiction with the configuration you require. 
    You can also avoid repetitive triggers by skipping some of the security_scan checks filling
    the skip_checks parameter with the check IDs you want to skip.

    Avoid to modify elements that are not related to the issue, or are functional, unless required.
    </Important>
  expected_output: >
    Tool call in the form:  
    `Action: yaml_edit  Action_Inputs: { ... }` 
    The last validation must succeed.
  max_retries: 3
  agent: devops_engineer

verify_solution:
  description: >
    **Feedback** is mandatory over all other information.
    Use the config_validator tool to validate the solution, the yaml_read tool to read the file
    and the yaml_edit tool to edit the file and apply the required corrections when necessary.

    Fix the issues in the following order:
    1. yaml syntax errors
    2. kubernetes syntax errors
    3. duplicated elements
    4. kubernetes --dry-run errors
    5. security_scan high risk errors
    6. security_scan medium risk errors
    7. security_scan low risk errors
    8. best practices errors

    <Steps>
    1. Use the config_validator tool to validate the solution.
    2. If the validation fails, use the yaml_read tool to read the file. You can read the full file or
    a specific line range.
    3. Use the yaml_edit tool to edit the file and apply the required corrections when necessary.
    4. Check for duplicated elements in the file and remove them.
    5. Repeat steps 1-4 until the validation passes. Its is mandatory to read before editing.
    </Steps>

    to end, the file must be valid and comply with the best practices. Only if it is not possible
    to meet some low risk errors, or best practices errors, you can mark the task as completed even
    when those two points are not met. The rest of the requirements (1 to 6) must be met.

    <Important>
    - Pay special attention to all the fields of the validation output, and try to fix them all, with
    the exception of security_scan errors, that are at your consideration to be fixed or not, 
    depending on the severity or the level of contradiction with the configuration you require. 
    - You can also avoid repetitive triggers by skipping some of the security_scan checks filling
    the skip_checks parameter with the check IDs you want to skip.
    - Remember labels cant include whitespace, so use _ or - instead of space.
    ** You should never apply a fix that goes against the original intent of the manifest. **
    - Avoid to modify elements that are not related to the issue, or are functional, unless required.
    </Important>

  expected_output: >
    Ordered tool calls ending with:  
    `Action: config_validator  Action_Inputs: { "enable_security_scan": true }` 
    `Action: yaml_read  Action_Inputs: { ... }` (if needed)  
    `Action: yaml_edit  Action_Inputs: { ... }` (if needed)  
    `Action: config_validator  Action_Inputs: { "enable_security_scan": true }`  (if needed) 
    Validation must succeed (except for low severity security_scan, Try to make the manifests comply with the best
    practices as much as possible).

    <Important>
    Pay special attention to all the fields of the validation output, and try to fix them all.
    Editing the file is mandatory.
    </Important>
  max_retries: 3
  context:
    - analyse_manifest_issue
    - apply_manifest_fix
  agent: devops_engineer

log_manifest_fix:
  description: >
    **Goal — create a record**

    Summarise, in no more that 50 words, the actions taken in the previous step,
    which is mentioned as context.

    • Root-cause & symptom  
    • Key YAML edits  
    • Validation success  
    • Any open caveats / follow-ups (e.g., will add HPA later)
  expected_output: >
    Plain-text paragraph (4-6 sentences) as described, en 3 person, past tense, professional tone.
  max_retries: 3
  context:
    - apply_manifest_fix
    - verify_solution
  agent: devops_researcher

