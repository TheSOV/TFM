analyse_manifest_issue:
  description: >
    **Goal - pinpoint and plan the fix**  
    Examine the failing manifest, identify root-cause(s) of the validation
    errors, and sketch a *minimal* change set that yields a functional
    Kubernetes object (security hardening out-of-scope).

    **Scope & rules**

    • Triage **one file per run** - the path is inferred from the first stack-
      trace or the `file:` entry inside `<issues>`.  
    • Error details live in `<issues>`; clear them before touching stylistic
      nits.  
    • If spec ambiguity or conflicting best practices arise, *pause once* to
      query **devops_researcher** (for example: unknown `apiVersion`, 
      deprecated field, incompatible selector).  
    • Validation targets functional readiness only - ignore PSP/PSS, CIS,
      image-signing, etc.

    **Execution workflow**

    1. **Parse** - read file & error; highlight offending YAML keys/values.  
    Use the file_version_history and file_version_diff to see that last changes.
    If the file has a last working version, use it as a reference.
    2. Check the logs, if the same error has been reported before multiple consecutive times, 
    directly ask the devops_researcher to resolve the issue, giving the actual code and errors.
    Request him to use web browser tool and stackoverflow tool to search for the issue.
    and provide a simple, functional solution. If this is the case, jump to the xxx step.
    If it is not the case, continue with the next steps.
    3. **Diagnose** - map each error to its cause (schema, typo, missing field
       or wrong kind) and cite the relevant doc line.  
    4. **Resolve gaps** - if the fix requires domain knowledge (e.g.,
       `RollingUpdate` strategy default), ask **devops_researcher**; otherwise
       apply the *smallest viable* default and record why. As Iterations increase,
       increase the consults to the researcher, looking for the minimal viable
       default.
    5. **Propose fix** - list exact field edits (add / replace / delete).  
    6. **Radical fix** - in case that iterations goes over 5, and a persistent issue is found, 
    in the records, apply redical changes, ignoring best-practice and security, in order
    to ensure that the issue is fixed.
    7. **Report** - deliver root-cause, proposed YAML diffs (in prose),
       researcher Q-&-A, and rationale.
    
    **Context Blocks**

    • `<issues>` - Last validation error output.  
    • `<blackboard>` - Project-wide artefacts and notes.  
    • `<feedback>` - If present, addressing it is top priority.


    <issues>
    {issues}
    </issues>

    <blackboard>
    {blackboard}
    </blackboard>

    <feedback>
    {feedback}
    </feedback>
  markdown: true
  expected_output: >
    • Root-cause explanation  
    • Proposed YAML changes (plain text, no code block)  
    • Any question sent to **devops_researcher** + summary answer  
    • Justification for each default
  max_retries: 3
  agent: devops_engineer

apply_manifest_fix:
  description: >
    **Goal - edit, lint, repeat until clean**  
    Apply the agreed fixes, run validation (security scan disabled), and exit
    only after the manifest passes with zero functional errors.

    **Execution workflow**

    1. **Edit file** - use `edit_file` (or `create_file` if missing) to apply
       each change described in *analyse_manifest_issue*.  
    2. **Validate** -  
       a. Run config validation tool {security_scan:false}
       b. If validation fails, patch and re-validate.  
       c. After **three** failed loops or a brand-new error class, *escalate to
          **devops_researcher*** with the fresh error payload.  
    3. **Success** - final action **must** be a passing
       `validate_manifest  {security_scan:false}` call.

    **Important**  
    The YAML edit **is mandatory**. The final action must be a successful.
    validation call.

    In case you need to create a file, that is not in the project and plan,
    add it to one of the existing files. You cant create files out of the project and plan.

    **Context Blocks**
    • `<issues>` - Last validation error output.  
    • `<blackboard>` - Updated project state.  
    • `<feedback>` - If present, address first.

    <issues>
    {issues}
    </issues>

    <blackboard>
    {blackboard}
    </blackboard>

    <feedback>
    {feedback}
    </feedback>
  expected_output: >
    Tool calls in the form:  
    `Action: edit_file  Action_Inputs: { ... }`  
    … followed by  
    `Action: validate_manifest  Action_Inputs: { security_scan: false }`  
    The last validation must succeed.
  max_retries: 3
  agent: devops_engineer

log_manifest_fix:
  description: >
    **Goal — create a record**

    Summarise, in no more that 50 words, the actions taken in the previous step,
    which is mentioned as context.

    • Root-cause & symptom  
    • Key YAML edits  
    • Validation success  
    • Any open caveats / follow-ups (e.g., will add HPA later)
  expected_output: >
    Plain-text paragraph (4-6 sentences) as described, en 3 person, past tense, professional tone.
  max_retries: 3
  context:
    - analyse_manifest_issue
    - apply_manifest_fix
  agent: devops_engineer

