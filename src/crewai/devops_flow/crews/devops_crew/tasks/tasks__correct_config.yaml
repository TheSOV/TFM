correct_k8s_config:
  description: >
    Your goal is to correct the errors found in the k8s config file.
    
    <steps>
    1 - Read and understand the k8s config file.    
    2 - Analyze the content of the errors found and the k8s config file. 
    3 - Determine what part of the file are causing the errors found.   
    4 - Propose an solution. 
    5 - Analyze the solution, and think if it will solve the errors found.
    6 - If the solution will not solve the errors found, research with the devops_researcher if required for new information. 
    Then return to step 3.
    7 - Edit the k8s config file and correct the errors found.
    8 - Validate the k8s config file using the config validator tool. 
    9 - Return a summary of the task, adding the non-solved issues found, following scale:

    The severity levels are:
      - low
      - medium
      - high
      - very_high

      The low severity issues are not critical and can be ignored. With this issues, the cluster functionality is not affected.
      The medium severity issues are critical and should be fixed. With this issues, the cluster functionality is not affected.
      The high severity issues are critical, representing security and/or stability issues and should be fixed. With this issues, the cluster functionality is not affected. 
      The very_high severity issues are critical ones that prevents the cluster from working as expected.

      if no issues were found, add an element with the issue "No issues found" and the severity "low".
    </steps>
    
    <important>
    - Take in count that the errors that are from apply and test steps, are the more important to fix, and can 
    show contradictory information with respect to checkov errors. In that case, ignore the checkov errors and 
    focus on the apply and test errors. At this point, you can override any good practice if required to fix the 
    errors found, which prevents the cluster from working as expected.
    - Remember that will work over a Kind empty cluster, so the order in which the resources are created is important.
    for example, a new namespace should be created before a new deployment.
    - Enure that the non-resolved issues found are not critical for the task to be completed, and that left only because
    it is not possible to fix them with the tools available.
    - To use the tools available, use the proper way to use them, with Action and Action Input.
    - You should work over the given k8s config file, and not create a new one.
    </important>

    <task_completion_requirements>
      Have a valid k8s config file, with the latest updates.
      Before finishing, the file requires to be validated using the config validator tool. Take on count that config 
      validator checks cant override a change made to solve high or very_high severity issues, preventing the 
      cluster from working as expected.
      The final summary should must include (if any) the non-solved issues found.
    </task_completion_requirements> 
    
    Some best practices to follow:
    <best_practices>
    - Use a namespace to isolate the resources created.
    - Always include at the begining the namespace to be used.
    - Do not use the latest stable tag, instead use the pullable digest to pull the image, or in its absence, 
    use the latest stable tag by specifying the tag name.
    </best_practices>
    
    The state contains the available information until the current point, use it to complete the task.
    
    <state>
      {state}
    </state>   
  expected_output: >
    A edited k8s config file, with the latest updates and comments explaining the choices made. 
    
    Also, a json output, should must include a with the paths of the created files,
    and a list of the non-solved issues found with explanations. If the config validator tool was not executed, 
     the list of non-solved issues should be empty. If no issues were found, add an element with the issue 
     "No issues found" and the severity "low".
  max_retries: 3
  agent: devops_engineer
