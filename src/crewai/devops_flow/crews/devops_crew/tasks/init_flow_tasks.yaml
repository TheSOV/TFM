gather_information:
  name: gather_information
  description: >
    Blueprint-Planning Guide (Markdown Output)

    **Start Here**  
    • If a **<feedback>** block is present, fix those items first. Feedback 
    is mandatory.

    **Goal**  
    Turn **<user_request>** into a high-level Kubernetes plan so another
    engineer can build the cluster with no follow-up questions.  
    Focus on Kubernetes wiring; image details come later.

    **Deliverable**  
    *Markdown only* — no YAML, JSON, or code.  
    Answer every bullet below with clear, concrete points.

    **What to Cover**

    1. **System Map**  
      • List each micro-service, batch job, or event component.  
      • Show how they communicate (HTTP / gRPC, queue, topic).

    2. **Cluster Layout**  
      • Single cluster.  
      • Meaningful namespaces (never `default`).  
      • Optional node-pool / taint hints.

    3. **Component Catalog**  
      • For every workload: one-line mission + **Docker Hub image name only**  
        (nginx, redis, mycorp/api).  
      • If the requested image isn’t on Docker Hub, pick a safe alternative there.

    4. **Kubernetes Objects & Rationale**  
      • List only what you will template: Deployment / StatefulSet, Service,  
        Ingress | Gateway, HPA / VPA, ConfigMap, Secret, RBAC, NetworkPolicy,  
        ServiceAccount, PVC / Volume, AdmissionPolicy.  
      • Briefly explain *why* each is needed.  
      • One YAML file per resource—never mix two kinds.

    5. **Configuration Surface**  
      • Initial env vars.  
      • What lives in ConfigMaps vs. Secrets (never mix; Secrets use `stringData`).  
      • Mount paths and projected tokens.

    6. **Scalability & HA**  
      • Starting replica count.  
      • HPA trigger metric (CPU / Memory).  
      • Pod anti-affinity.  
      • Update strategy (Rolling / OnDelete).

    7. **Networking**  
      • Service type: ClusterIP or headless.  
      • Ingress class or Gateway.  
      • Egress policy (allow / deny).  
      • DNS naming pattern.

    8. **Security**  
      • RBAC roles & bindings.  
      • Pod Security Standard target: `baseline` or `restricted`.  
      • Default `securityContext` (runAsNonRoot, fsGroup, readOnlyRootFilesystem,  
        allowPrivilegeEscalation: false).  
      • Capabilities to **drop** and any to **add** (only when justified).  
      • Image-signature / policy controls.

    9. **External Services**  
      • Databases, caches, cloud APIs.

    10. **Platform Limits**  
        • CPU arch (x86 / ARM), GPU needs, OS distro, container runtime.

    11. **Namespaces**  
        • List every namespace and its purpose.

    12. **Ports**  
        • State whether each container needs a well-known ports or system ports (< 1024) or  
          ephemeral or dynamic/private ports (> 1024).  
        • Prefer ephemeral or dynamic/private ports and map them in the Service.  
        • Declare non-default ports in ConfigMap or Service.

    13. **Git Layout (test only)**  
        ```
        /manifests/
          workloads/
            api-deployment.yaml
          network/
            api-service.yaml
          rbac/
            api-role.yaml
        ```
        • GitOps-friendly names, no overlays or Kustomize yet.

    **Rules**  
    • Include every future file now, even if it starts empty.  
    • Use only Docker Hub images—other registries are forbidden.  
    • No specific versions, user IDs, or ports yet; that comes later.  
    • Stick to current APIs; avoid hacks or workarounds.  
    • If data is missing, use published best practices.

    <blackboard>
    {blackboard}
    </blackboard>

    <feedback>
    {feedback}
    </feedback>
  expected_output: >
    Markdown only—no YAML/JSON/code—answer *every* bullet with concrete detail.
    Images must be bare names (nginx, redis).  Another senior engineer should
    build the cluster without further Q & A.
  markdown: true
  max_retries: 3
  agent: devops_researcher

research_project:
  name: research_project
  description: >
    Blueprint-Hardening Guide (Evidence-Driven)

    **Start Here**  
    • If a **<feedback>** block is present, fix those items first. Feedback 
    is mandatory.

    **Goal**  
    Turn every placeholder in the draft blueprint into a real value backed by
    documentation or community consensus.  When data is missing, search; if it
    truly can’t be found, fall back to current best practice.  Include **all**
    YAML files needed for a production-grade app, including namespace
    manifests—nothing may be added later.

    **Approved Research Tools**  
    • `rag` – fetch official docs and CNCF notes  
    • `web_browser` – search vendor sites, SIG discussions, RFCs  
    • `stack_overflow_tool` – check battle-tested fixes and edge cases  

    **Workflow**  
    1. Read official docs for every Kubernetes object you plan to ship.  
    2. Pull security and RBAC guidance (Pod Security Standards,
      `securityContext`, least-privilege RBAC).  
    3. Verify scaling numbers with HPA/VPA examples and limits.  
    4. Align directory names with common GitOps layouts (Argo CD / Flux).  
    5. Spot conflicts and resolve them using CNCF or SIG precedents.  
    6. For each change, write ≤ 1-sentence justification **with citation**.

    **Hard Rules**  
    • **Docker Hub images only.**  If the requested image is missing, choose a
      comparable one from Docker Hub and note the swap.  
    • One resource per YAML file; never mix kinds.  
    • Do **not** set image tags, ports, user IDs, or GIDs yet—those come later.  
    • Keep the plan minimal, secure, production-ready; no hacks or
      workarounds.  
    • Stick to supported API versions.

    <blackboard>
    {blackboard}
    </blackboard>

    <feedback>
    {feedback}
    </feedback>

  expected_output: >
    Narrative prose or structured Markdown—**no YAML/JSON/code blocks**—that replaces
    all placeholders with fact-based content, backed by cited sources.
    Include only container image names. Each field must present precise, actionable
    information ready for engineering implementation. It can be as extended as you need.
  markdown: true
  max_retries: 3
  context:
    - gather_information
  agent: devops_researcher

create_advanced_plan:
  name: create_advanced_plan
  description: >
    **Start Here**  
    • If a **<feedback>** block is present, fix those items first. Feedback 
    is mandatory.

    Production-Ready Manifest Playbook (Markdown Output)

    **Mission**  
    Walk a senior engineer—step by step—through finishing every Kubernetes
    manifest for a single-node **kind** cluster.  Aim for tight security,
    clean GitOps flow, and zero hacks.

    **1. Directory Tree (no overlays)** 
      /manifests/
        workloads/ # Deployments, StatefulSets, Jobs
        network/ # Services, Ingresses / Gateways, NetworkPolicies
        storage/ # PVCs, StorageClasses (if any)
        rbac/ # ServiceAccounts, Roles, RoleBindings
        admission/ # Validating / Mutating policies
        namespaces/ # One file per namespace

    *Create every folder and placeholder file now—even if some stay empty
    until a later pass.*

    **2. File-by-File Checklist**  
    | Folder | File Name | Must Contain | Why |
    |--------|-----------|--------------|-----|
    | namespaces/ | `<team>.yaml` | Namespace object with `labels` for owner & PodSecurity level. | Keeps resources out of `default`; enforces Restricted PSP. |
    | workloads/ | `api-deployment.yaml` | Deployment skeleton, `spec.selector`, **no tag yet**. | Core stateless service. |
    | network/ | `api-service.yaml` | ClusterIP Service, ephemeral or dynamic/private container port, map to original via `targetPort`. | Clean routing; well-known ports. |
    | rbac/ | `api-sa.yaml` | ServiceAccount with minimal permissions. | Follows least-privilege. |
    | rbac/ | `api-role.yaml` & `api-rolebinding.yaml` | Read-only access to namespace ConfigMaps/Secrets. | Prevents lateral movement. |
    | admission/ | `image-policy.yaml` | AdmissionPolicy blocking non-DockerHub images. | Enforces repo rule. |

    *(Repeat rows for each workload.)*

    **3. Capabilities Policy**  
    - **Drop**: `ALL` by default.  
    - **Add**: only what the image strictly needs (`NET_BIND_SERVICE` if
      mapping well-known ports, etc.).  
    - Set `allowPrivilegeEscalation: false`; raise to `true` **only** if a
      needed capability demands it—and document the reason in comments.

    **4. Security Context Defaults**  
    - `runAsNonRoot: true`, `readOnlyRootFilesystem: true` always possible
    - `fsGroup` for shared volume writes (avoid BusyBox `chown` workarounds)  
    - `seccompProfile: RuntimeDefault` always possible
    - `automountServiceAccountToken: false` unless the pod calls Kubernetes API

    **5. Networking Rules**  
    - One **ClusterIP** per service; headless only for StatefulSets.  
    - Ingress/Gateway uses path-based routing, `nginx` class by default.  
    - NetworkPolicy: deny all egress except required external services.
    - Use

    **6. Scaling & Availability**  
    - Start with  a selected number of replicas depending on the workload type and user requirements.  
    - Same for HPA targets and upgrade strategy.  
    - Anti-affinity skipped (single node), but keep the rule commented for
      future multi-node use.

    **7. Storage**  
    - `emptyDir` for scratch, PVC (`ReadWriteOnce`) for data.  
    - Volume names match mounts; read-only vs read-write flags explicit.
    - Use FsGroup and ReadOnlyRootFilesystem:True to allow non-root users to write to the volume when possible
    - Avoid to use `initContainer` or other workarounds just to fix permissions.

    **8. GitOps Alignment**  
    - One resource per file.  
    - File names match the object’s metadata.name.  
    - Use Kustomize bases **later**—not at this stage, do not include.

    **9. Hard Rules (Failure to comply blocks merge)**  
    - **Docker Hub images only.**  
    - No image tags, user IDs, or GIDs until the next phase, but state to prefer dynamic/private/ephemeral ports over well-known ports.
    - Any workaround (e.g., `initContainer` just to fix perms) must be removed
      or justified in writing—and will face strict review.  
    - Use only non-deprecated API versions.

    **10. Out-of-Scope**  
    Observability, cost tuning, chaos testing.

    11. Notes
    Due a known issue with k8s, if runAsNonRoot is set to true, allowPrivilegeEscalation is set to false, even if you
      add Capabilities to the container, the capabilities will not be applied.

    <blackboard>
    {blackboard}
    </blackboard>

    <feedback>
    {feedback}
    </feedback>

  expected_output: >  
    Markdown only—no YAML/JSON/code—image names only. Enough detail for a
    senior engineer to generate final manifests without guesswork. Do not
    add to the md any symbol or text out of the format, it will be rendered
    as it is.
  markdown: true
  max_retries: 3
  agent: devops_researcher


