gather_information:
  description: >
    **Goal - draft the manifest blueprint**  
    Extract from *user_request* only the architectural and operational facts
    needed to write Kubernetes YAML. Ensure to include all the files  that might be 
    required to complete a full production grade application, even if in later stages
    you will leave some of them empty or with default values. You wont be able to add
    new files after this task.

    **What you must enumerate**

    • **System-level View** - micro-services, batch jobs, event buses and how they
      talk (HTTP/gRPC, queue, topic).  
    • **Cluster Topology** - target *single* cluster; propose namespace(s) that
      are **never “default”** plus optional node-pool/taint hints.  
    • **Component Catalogue** - workload → one-line mission → **image name
      only** (e.g. nginx, redis, mycorp/api).  
    • **Kubernetes Resources & Why** - include only objects we will
      template: Deployment/StatefulSet, Service, Ingress | Gateway,
      HPA/VPA, ConfigMap, RBAC, NetworkPolicy, ServiceAccount,
      Volumes/PVC, AdmissionPolicy.  
    • **Configuration Surface** - prelim Env Vars, ConfigMaps vs. Secrets
      (do *not* mix, and for secrets always use stringData instead of data);
      mount paths; projected tokens.  
    • **Scalability & HA** - initial replica counts + HPA trigger metric
      (CPU / memory), pod anti-affinity, upgrade strategy.  
    • **Networking & Routing** - ClusterIP vs headless; ingress class; egress
      allow/deny; DNS naming convention.  
    • **Security Controls** - RBAC bindings, PodSecurityStandard level
      (“baseline”/“restricted”); securityContext knobs
      (runAsNonRoot, fsGroup); image-signature policy.    
    • **External Dependencies** - DBs, caches, cloud services.  
    • **Platform Constraints** - ARM/GPU, OS distro, container runtime.  
    • **Namespaces** - define the namespaces that will be used in the cluster
    • **Ports** - define if the ports that will be used  by the images are privileged ports (-1024) or unprivileged ports (+1024).
    Prefer unprivileged ports (+1024) and remember to map them to the original port using the services. If not using privileged 
    ports and or default ports (+1024), remember you might need to declare the them in configmap or service.
    • **Capabilities** - define the capabilities that will be dropped and that will be added to the cluster
    • **Manifests Layout** - repo tree *for test only*; no overlays:
      ```
      /manifests/
        api-deployment.yaml
        api-service.yaml
      ```  
      Use GitOps-friendly directory names (workloads/, network/, rbac/).

    *If any datum is missing, you can search, otherwise fallback to
    published best practice.*

    <Important>
       - You can use only images from DockerHub. If the user requests a specific image, 
       you can use it, but if the image is not available, you must use an alternative 
       image from DockerHub, searching with the available web and search tools. 

       - It is totally forbidden to use images from other repositories.

       - Ensure to specify for each tentative yaml file, the elements and configurations
       that are relative to it. Never mix two resources in the same yaml file during the 
       planification steps.

       - At this point, do not include any specific image version, ports, users, users groups,
       etc. You will do it in the next steps.

       - Your focus is to create a minimal, secure and production ready plan. Focus on the k8s 
       implementation, and the minimal image configuration required to implement it.
    </Important>

    <blackboard>
    {blackboard}
    </blackboard>

    <feedback>
    {feedback}
    </feedback>
  expected_output: >
    Markdown only—no YAML/JSON/code—answer *every* bullet with concrete detail.
    Images must be bare names (nginx, redis).  Another senior engineer should
    build the cluster without further Q & A.
  markdown: true
  max_retries: 3
  agent: devops_researcher

research_project:
  description: >
    **Goal - harden the blueprint with facts**  
    Replace all placeholders in  with evidence-backed
    content. Leave no placeholders, in case of missing information, you can search, 
    otherwise fallback to published best practice. If in
    the user request is not clear, assume the best practices and security.
    Ensure to include all the files that might be 
    required to complete a full production grade application, even if in later stages
    you will leave some of them empty or with default values. You wont be able to add
    new files after this task. Include the yaml files to create the namespace(s).

    **Research workflow**

    1. Query official docs for each object.  
    2. Check security/RBAC guidance (PodSecurity Standards, securityContext).  
    3. Validate scaling values against HPA walkthroughs and custom-metric limits.  
    4. Confirm directory/naming scheme with GitOps references (Argo CD, Flux).  
    5. Note conflicts; resolve via community precedence (CNCF, SIG notes).  
    6. Justify each change in ≤ 1 sentence with citation. 

    <Important>
       - You can use only images from DockerHub. If the user requests a specific image, 
       you can use it, but if the image is not available, you must use an alternative 
       image from DockerHub, searching with the available web and search tools. 
       - It is totally forbidden to use images from other repositories.
       - Ensure to specify for each tentative yaml file, the elements and configurations
       that are relative to it. Never mix two resources in the same yaml file during the 
       planification steps.
       - At this point, do not include any specific image version, ports, users, users groups,
       etc. You will do it in the next steps.
       - Your focus is to create a minimal, secure and production ready plan. Focus on the k8s 
       implementation, and the minimal image configuration required to implement it.
    </Important>

  expected_output: >
    Narrative prose or structured Markdown—**no YAML/JSON/code blocks**—that replaces
    all placeholders with fact-based content, backed by cited sources.
    Include only container image names. Each field must present precise, actionable
    information ready for engineering implementation.
  markdown: true
  max_retries: 3
  context:
    - gather_information
  agent: devops_researcher

create_advanced_plan:
  description: >
    **Goal - production-ready manifest playbook**  
    Guide a senior engineer through every ordered step required to finish all
    YAML—*pre-observability*, single **/manifests** tree.

    Your focus is the advanced plan. 

    **Deliverable**

    • **Manifests Layout** - **no overlays**; create the layout tree, with 
     GitOps-friendly directory names (workloads/, network/, rbac/), 
     based on the previous research. Include the yaml files to create the namespace(s). Example:  
      ```
      /manifests/
        workloads/
          workload1_name.yaml
          workload2_name.yaml
        network/
        rbac/
        folder/
          folder1/
            folder1_name.yaml
            folder2_name.yaml
          folder2/
            folder2_name.yaml
      ``` 

      Include all the folders and files required for a high level, top quality, 
      production ready plan.

    Include the configuration steps to make the folder work with 
      the best practices and security.

    Try to write step by step what should the manifest contain, with a very 
    brief explanation of why.

    • Define the capabilities that will be dropped and that will be added to the cluster

    No code is required. It is a verbal explanation of what should be done.

    • Any other considerations or information that you think are important, such as specific 
    configuration steps, specific informat  ion of a component, image etc. (here, you can hit 
    devops_researcher for recommended images (the image from other repos, but prefer official 
    images) would met the required criteria, in the case that the user does not explicitly ask 
    for a specific image, some extra data, etc, but do not pin the version of the images yet).

    • **Out-of-Scope** - observability, cost tuning, chaos tests.

    Include references if you use any.

    <Important>
       - You can use only images from DockerHub.
       - Ensure to specify for each tentative yaml file, the elements and configurations
       that are relative to it. Never mix two resources in the same yaml file during the 
       planification steps.
       - Your focus is to create a minimal, secure and production ready plan. Focus on the k8s 
       implementation, and the minimal image configuration required to implement it.
      - Ensure that the plan matches the request of the user requirements (except for the 
      Manifests Layout, that will be high end, production ready with best practices and security).
      - The output MUST be a markdown, NOT a reference to it, 
      like the phrase "like above".
      - At this point, do not include any specific image version, ports, users, users groups,
       etc. You will do it in the next steps.
      - Take in count that we are working on a single node kind cluster.
    </Important>

    <blackboard>
    {blackboard}
    </blackboard>

    <feedback>
    {feedback}
    </feedback>

  expected_output: >  
    Markdown only—no YAML/JSON/code—image names only. Enough detail for a
    senior engineer to generate final manifests without guesswork. Do not
    add to the md any symbol or text out of the format, it will be rendered
    as it is.
  markdown: true
  max_retries: 3
  agent: devops_researcher


