write_solution:
  description: >
    Persist-and-Lint Guide

    **Start Here**  
    • If a **<feedback>** block is present, fix those items first. Feedback 
    is mandatory.

    **Goal**  
    Save every manifest to the target file, then lint in a loop until
    validation is clean or only low-severity warnings remain.

    **Step-by-Step Plan**

    1. **Analyze**  
      • Read all objects in **<manifest>** (not the file)
      • In your head, stitch them into one valid YAML stream.  
      • Double-check volumes, ports, securityContext, capabilities,
        PVCs—every detail from **<resources>** and **<blackboard>**.

    2. **Create / Update File**  
      • `Action: create_file` Action_Inputs: { ... } with the merged YAML.  

    3. **Validate Loop**  
      • `Action: config_validator` Action_Inputs: { ... } on the file.  
      • Fix every error that is not explicitly low-severity. If the low severity is fixable, fix it.
      • Re-run the validator until it passes.

    4. **Success Criteria**  
      • Final action is a passing validation call.  
      • Low-severity security warnings may remain **only** if unresolvable.

    **Hard Rules**  
    • No duplicate resources.  
    • Perfect YAML and Kubernetes syntax.  
    • One file edited—no extras.  
    • No shortcuts or dirty fixes (e.g., BusyBox chown hacks).  
    • Follow best practices for security and naming throughout.


    5. Notes
      Due a known issue with k8s, if runAsNonRoot is set to true, allowPrivilegeEscalation is set to false, even if you
      add Capabilities to the container, the capabilities will not be applied.
      
    <manifests>
    {manifests}
    </manifests>

    <feedback>
    {feedback}
    </feedback>

  expected_output: >
    Ordered tool calls ending with:  
    `Action: yaml_edit  Action_Inputs: { ... }`  
    `Action: config_validator  Action_Inputs: { "enable_security_scan": true }`  
    Validation must succeed (except for low severity security_scan, Try to make the manifests comply with the best
    practices as much as possible).

    <Important>
    Pay special attention to all the fields of the validation output, and try to fix them all, with
    the exception of security_scan errors, that are at your consideration to be fixed or not, 
    depending on the severity or the level of contradiction with the configuration you require.
    Editing the file is mandatory. You can also avoid repetitive triggers by skipping some of the security_scan checks filling
    the skip_checks parameter with the check IDs you want to skip.
    Annotations cant be a "#":"some annotation".
    </Important>
  max_retries: 3
  agent: devops_engineer

verify_solution:
  description: >
      Lint-and-Fix Playbook

      **Goal**  
      The target manifest must pass validation and follow best practices.  
      Only low-risk or best-practice warnings may remain—and only if
      they conflict with a hard requirement.

      **Allowed Tools**  
      • `config_validator` – run all checks  
      • `yaml_read` – inspect the file (full or line range)  
      • `yaml_edit` – patch the file after reading  

      **Fix Order (stop at success)**  
      1. YAML syntax errors  
      2. Kubernetes schema errors  
      3. Duplicate objects  
      4. `kubectl --dry-run` errors  
      5. High-risk security_scan issues  
      6. Medium-risk security_scan issues  
      7. Low-risk security_scan issues  
      8. Remaining best-practice warnings  

      **Workflow**  
      1. **Validate** – run `config_validator`.  
      2. **Read** – if errors appear, run `yaml_read` (entire file or affected
        lines). Reading before editing is mandatory.  
      3. **Edit** – use `yaml_edit` to fix what you just inspected.  
      4. **De-dupe** – ensure no resource is declared twice.  
      5. Repeat 1-4 until validation passes or only acceptable low-risk /
        best-practice notes remain. Ignore 

      **Security Notes**  
      • If a security_scan finding conflicts with a required setting (caps,
        ports, volumes, UID, etc.), you may skip that check via
        `skip_checks`. Document the decision.  
      • Never lower security purely for convenience.  

      **Completion Criteria**  
      • `config_validator` exits cleanly (or only ignorable low-risk /
        best-practice notes).  
      • File contains valid, well-formatted YAML and one resource per
        document (`---` separators).  
      • All edits occur in the single file specified by **<blackboard>**—no
        new files.

  expected_output: >
    Ordered tool calls ending with:  
    `Action: config_validator  Action_Inputs: { "enable_security_scan": true }` 
    `Action: yaml_read  Action_Inputs: { ... }` (if needed)  
    `Action: yaml_edit  Action_Inputs: { ... }` (if needed)  
    `Action: config_validator  Action_Inputs: { "enable_security_scan": true }`  (if needed) 
    Validation must succeed (except for low severity security_scan, Try to make the manifests comply with the best
    practices as much as possible).

    <Important>
    - Pay special attention to all the fields of the validation output, and try to fix them all, with
    the exception of security_scan errors, that are at your consideration to be fixed or not, 
    depending on the severity or the level of contradiction with the configuration you require.
    - Editing the file is mandatory. You can also avoid repetitive triggers by skipping some of the security_scan checks filling
    the skip_checks parameter with the check IDs you want to skip.
    - Remember labels cant include whitespace, so use _ or - instead of space.
    </Important>
  max_retries: 3
  agent: devops_engineer

log_solution:
  description: >
    **Goal — create a record**

    Summarise, in no more that 300 words, the actions taken in the previous step,
    which is mentioned as context.

  expected_output: >
    Plain-text paragraph max 300 words as described, en 3rd person, past tense, professional tone.
  max_retries: 3
  context:
   - write_solution
  agent: devops_researcher