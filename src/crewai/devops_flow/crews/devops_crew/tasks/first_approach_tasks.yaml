write_solution:
  description: >
    **If `<feedback>` exists, resolve it first.**

    **Goal — persist, lint, iterate until clean**
    Using the context you received from the previous step, persist the YAML file
    and lint it until it passes validation or validation errors received are not critical.

    **Workflow**
    1. **Analyze** -  
       Analyze all the manifests in the <manifest>, create a compiled version of the yaml file
       with all the resources and ensure that all the resources are correct and valid. All this 
       at the think level, without any action.
    2. **create** -  
       `Action: create_file  Action_Inputs: { ... }`  
       Include the new definitions in the file. 
       End each resource with ---, to leave the next file ready to be edited.
    2. **Validate loop** -  
       `Action: config_validator  Action_Inputs: { ... }`  
       Analyze the validation until the validation is successful. Try to make the manifests comply with the best
       practices as much as possible.
    3. **Success** - final action *must* be a passing validation call 
       (except for low severity security_scan, after not being possible to be solved).

    <Important>
    * Take on count all the details in the <resource> section and in the blackboard, 
    ensuring to take in count all informations like volumes, capabilities, ports, 
    write permissions, volume claims, etc. All details are important.
    * The file to be edited/created is the one in the <blackboard>, project, file_path. No other
    files can be created or edited.
    * Ensure no duplicate resources are created.
    * Be extremely careful with the Yaml and Kubernetes syntax. 
    * Ensure to write all the solution, it is very probable that there is no content in the file, 
    so write all the solution. 
    </Important>

    <manifests>
    {manifests}
    </manifests>

    <feedback>
    {feedback}
    </feedback>

  expected_output: >
    Ordered tool calls ending with:  
    `Action: yaml_edit  Action_Inputs: { ... }`  
    `Action: config_validator  Action_Inputs: { "enable_security_scan": true }`  
    Validation must succeed (except for low severity security_scan, Try to make the manifests comply with the best
    practices as much as possible).

    <Important>
    Pay special attention to all the fields of the validation output, and try to fix them all, with
    the exception of security_scan errors, that are at your consideration to be fixed or not, 
    depending on the severity or the level of contradiction with the configuration you require.
    Editing the file is mandatory. You can also avoid repetitive triggers by skipping some of the security_scan checks filling
    the skip_checks parameter with the check IDs you want to skip.
    Annotations cant be a "#":"some annotation".
    </Important>
  max_retries: 3
  agent: devops_engineer

verify_solution:
  description: >
    Use the config_validator tool to validate the solution, the yaml_read tool to read the file
    and the yaml_edit tool to edit the file and apply the required corrections when necessary.

    Fix the issues in the  following order:
    1. yaml syntax errors
    2. kubernetes syntax errors
    3. duplicated elements
    4. kubernetes --dry-run errors
    5. security_scan high risk errors
    6. security_scan medium risk errors
    7. security_scan low risk errors
    8. best practices errors

    <Steps>
    1. Use the config_validator tool to validate the solution.
    2. If the validation fails, use the yaml_read tool to read the file. You can read the full file or
    a specific line range.
    3. Use the yaml_edit tool to edit the file and apply the required corrections when necessary.
    4. Check for duplicated elements in the file and remove them.
    5. Repeat steps 1-4 until the validation passes. Its is mandatory to read before editing.
    </Steps>

    to end, the file must be valid and comply with the best practices. Only if it is not possible
    to meet some low risk errors, or best practices errors, you can mark the task as completed even
    when those two points are not met. The rest of the requirements (1 to 6) must be met.

    <Important>
    - Pay special attention to all the fields of the validation output, and try to fix them all, with
    the exception of security_scan errors, that are at your consideration to be fixed or not, 
    depending on the severity or the level of contradiction with the configuration you require.
    - If a security_scan error is found, but it is in contradiction with a configuration you 
    require (a capability, a port, a volume, a user, a user group, etc), ignore it and mark the 
    task as completed. You can also avoid repetitive triggers by skipping some of the security_scan checks filling
    the skip_checks parameter with the check IDs you want to skip.
    </Important>

  expected_output: >
    Ordered tool calls ending with:  
    `Action: config_validator  Action_Inputs: { "enable_security_scan": true }` 
    `Action: yaml_read  Action_Inputs: { ... }` (if needed)  
    `Action: yaml_edit  Action_Inputs: { ... }` (if needed)  
    `Action: config_validator  Action_Inputs: { "enable_security_scan": true }`  (if needed) 
    Validation must succeed (except for low severity security_scan, Try to make the manifests comply with the best
    practices as much as possible).

    <Important>
    - Pay special attention to all the fields of the validation output, and try to fix them all, with
    the exception of security_scan errors, that are at your consideration to be fixed or not, 
    depending on the severity or the level of contradiction with the configuration you require.
    - Editing the file is mandatory. You can also avoid repetitive triggers by skipping some of the security_scan checks filling
    the skip_checks parameter with the check IDs you want to skip.
    - Remember labels cant include whitespace, so use _ or - instead of space.
    </Important>
  max_retries: 3
  agent: devops_engineer

log_solution:
  description: >
    **Goal — create a record**

    Summarise, in no more that 300 words, the actions taken in the previous step,
    which is mentioned as context.

  expected_output: >
    Plain-text paragraph max 300 words as described, en 3rd person, past tense, professional tone.
  max_retries: 3
  context:
   - write_solution
  agent: devops_researcher